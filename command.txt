Command:

Start the minikube for local
> minikube start
> minikube delete
> minikube status
> minikube start --driver=virtualbox

check all the existing pods, services, replicaset, deployment
> kubectl get all

create pods with nginx
> kubectl run nginx --image=nginx

Check Pods Details
> kubectl get pods (kubectl get pod)
> kubectl get pods -o wide
> kubectl describe pod <pod-name>
  
delete pods
> kubectl delete pod <pod-name>
  
Update Pods
Update the pod-definition file and use 'kubectl apply' command or use 'kubectl edit pod <pod-name>' command.
  
  

Get Number of Nodes
> kubectl get nodes
> kubectl get nodes -o wide (show more details)


Check ReplicaSet
> kubectl get replicaset
> kubectl describe replicaset <replicaset-name>
> kubectl describe pods (use to check error on creating the replicaset)

Delete ReplicaSet
> kubectl delete replicaset <replicaset-name>

Edit ReplicaSet
> kubectl edit replicaset <replica-set-name>

Scale
> kubectl replace -f replicaset-definition.yml
> kubectl scale --replicas=6 -f replicaset-definition.yml
> kubectl scale --replicas=6 <type> <name> 
> kubectl scale --replicas=6 replicaset myapp-replicaset


Service
> kubectl get service
> kubectl describe service <service-name>
Create a service yaml file with name simple-webapp-deployment, with name web-service then map the port
> kubectl expose deployment simple-webapp-deployment --name=web-service --target-port=8080 --type=NodePort --port=8080 --dry-run=client -o yaml > svc.yaml


Deployment
> kubectl create -f deployment-definition.yml
> kubectl get deployments
you may also need to run the following; because deployment may create replicaset and pod
> kubectl get replicaset
> kubectl get pods

Rollout
> kubectl rollout status deployment/my-app-deployment 
> kubectl rollout history deployment/my-app-deployment
deployment/my-app-deployment => type/deployment-name
 
Rollback
> kubectl rollout undo deployment/my-app-deployment


The following create a deployment with the name httpd-frontend, with image=httpd:2.4-alpine
then set the replicaset as 3
> kubectl create deployment httpd-frontend --image=httpd:2.4-alpine
> kubectl scale deployment --replicas=3 httpd-frontend


Apply a YAML file (this will create/update the config)
> kubectl apply -f <yaml file name>
assume you have a deployment with name "myapp-deployment" and you want to update the nginx image version from 1.7.1 to 1.9.1
> kubectl set image deployment/my-app-deployment nginx=nginx:1.9.1
after the above command, you can use the "> kubectl rollout history deployment/<name>" to check the rollout status (about the deployment)


Show both of the pod and service together
> kubectl get pods, svc

to kick up the system, you can
1. run individual pod files + individual service files
2. run individual deployment files + individual service files
